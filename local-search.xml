<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RockerMQ 笔记</title>
    <link href="/2021/07/25/RockerMQ-%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/25/RockerMQ-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p><strong>1 消息（Message）</strong></p><p>消息是指，消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。</p><p><strong>2 主题（</strong>Topic）</p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725205453022.png" alt="image-20210725205453022"></p><p>Topic表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。 topic:message 1:n message:topic 1:1</p><p>一个生产者可以同时发送多种Topic的消息；而一个消费者只对某种特定的Topic感兴趣，即只可以订阅和消费一种Topic的消息。 producer:topic 1:n consumer:topic 1:1</p><p><strong>3 标签（</strong>Tag）</p><p>为消息设置的标签，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。Topic是消息的一级分类，Tag是消息的二级分类。</p><p>Topic：货物</p><p>tag=上海</p><p>tag=江苏tag=浙江</p><p>——- 消费者 —– </p><p>topic=货物 tag = 上海</p><p>topic=货物 tag = 上海|浙江</p><p>topic=货物 tag = *</p><p><strong>4 队列（</strong>Queue）</p><p>存储消息的物理实体。一个Topic中可以包含多个Queue，每个Queue中存放的就是该Topic的消息。一个Topic的Queue也被称为一个Topic中消息的分区（Partition）（相当于包装骨头的袋子）。一个Topic的Queue中的消息只能被一个消费者组中的一个消费者消费。一个Queue中的消息不允许同一个消费者组中的多个消费者同时消费。</p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725210345016.png" alt="image-20210725210345016"></p><p>在学习参考其它相关资料时，还会看到一个概念：分片（Sharding）。分片不同于分区。在RocketMQ中，分片指的是存放相应Topic的Broker。每个分片中会创建出相应数量的分区，即Queue，每个Queue的大小都是相同的。</p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725205610004.png" alt="image-20210725205610004"></p><p><strong>5 消息标识（</strong>MessageId/Key）</p><p>RocketMQ中每个消息拥有唯一的MessageId，且可以携带具有业务标识的Key，以方便对消息的查询。不过需要注意的是，MessageId有两个：在生产者send()消息时会自动生成一个MessageId（msgId)，当消息到达Broker后，Broker也会自动生成一个MessageId(offsetMsgId)。</p><p>msgId、offsetMsgId与key都称为消息标识。</p><p>msgId：由producer端生成，其生成规则为：producerIp + 进程pid + MessageClientIDSetter类的ClassLoader的hashCode +当前时间                 + AutomicInteger自增计数器</p><p>offsetMsgId：由broker端生成，其生成规则为：brokerIp + 物理分区的offset（Queue中的偏移量）</p><p>key：由用户指定的业务相关的唯一标识</p><h2 id="二、系统架构"><a href="#二、系统架构" class="headerlink" title="二、系统架构"></a>二、系统架构</h2><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725211733002.png" alt="image-20210725211733002"></p><p>RocketMQ架构上主要分为四部分构成：</p><p><strong>1 Producer</strong></p><p>消息生产者，负责生产消息。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p><blockquote><p>例如，业务系统产生的日志写入到<em>MQ</em>的过程，就是消息生产的过程 </p><p>再如，电商平台中用户提交的秒杀请求写入到<em>MQ</em>的过程，就是消息生产的过程 </p></blockquote><p>RocketMQ中的消息生产者都是以生产者组（Producer Group）的形式出现的。生产者组是同一类生产者的集合，这类Producer发送相同Topic类型的消息。一个生产者组可以同时发送多个主题的消息。</p><p><strong>2 Consumer</strong></p><p>消息消费者，负责消费消息。一个消息消费者会从Broker服务器中获取到消息，并对消息进行相关业务处理。</p><blockquote><p>例如，<em>QoS</em>系统从<em>MQ</em>中读取日志，并对日志进行解析处理的过程就是消息消费的过程。 </p><p>再如，电商平台的业务系统从<em>MQ</em>中读取到秒杀请求，并对请求进行处理的过程就是消息消费的 </p><p>过程。</p></blockquote><p>RocketMQ中的消息消费者都是以消费者组（Consumer Group）的形式出现的。消费者组是同一类消费者的集合，这类Consumer消费的是同一个Topic类型的消息。消费者组使得在消息消费方面，实现==负载均衡==（将一个Topic中的不同的Queue平均分配给同一个Consumer Group的不同的Consumer，注意，并不是将消息负载均衡）和==容错==（一个Consmer挂了，该Consumer Group中的其它Consumer可以接着消费原Consumer消费的Queue）的目标变得非常容易。</p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725213400661.png" alt="image-20210725213400661"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725213557574.png" alt="image-20210725213557574"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725212439827.png" alt="image-20210725212439827"></p><p>消费者组中Consumer的数量应该小于等于订阅Topic的Queue数量。如果超出Queue数量，则多出的Consumer将不能消费消息。</p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210725212453169.png" alt="image-20210725212453169"></p><p>不过，一个Topic类型的消息可以被多个消费者组同时消费。</p><blockquote><p>注意， </p><p><em>1</em>）消费者组只能消费一个<em>Topic</em>的消息，不能同时消费多个<em>Topic</em>消息 </p><p><em>2</em>）一个消费者组中的消费者必须订阅完全相同的<em>Topic</em></p><p>相当于一个订单号只能给处理库存的消费者组的一个来消费，如果两个消费库存的消费者消费了，库存就会-2</p><p>但是一个订单号可以被处理库存和增加销量两个不同的消费者组来消费</p></blockquote><p><strong>3 Name Server</strong></p><p><strong>功能介绍</strong></p><p>NameServer是一个Broker与Topic路由的注册中心，支持Broker的动态注册与发现。RocketMQ的思想来自于Kafka，而Kafka是依赖了Zookeeper的。所以，在RocketMQ的早期版本，即在MetaQ v1.0与v2.0版本中，也是依赖于Zookeeper的。从MetaQ v3.0，即RocketMQ开始去掉了Zookeeper依赖，使用了自己的NameServer。主要包括两个功能：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Broker管理：接受Broker集群的注册信息并且保存下来作为路由信息的基本数据；提供心跳检测机制，检查Broker是否还存活。</span><br><span class="hljs-keyword"></span><br>路由信息管理：每个NameServer中都保存着<span class="hljs-keyword">Broker集群的整个路由信息和用于客户端查询的队列信息。Producer和Conumser通过NameServer可以获取整个Broker集群的路由信息，从而进行消息的投递和消费。</span><br></code></pre></td></tr></table></figure><p><strong>路由注册</strong></p><p>NameServer通常也是以集群的方式部署，不过，NameServer是无状态的，即NameServer集群中的各个节点间是无差异的，各节点间相互不进行信息通讯。那各节点中的数据是如何进行数据同步的呢？在Broker节点启动时，轮询NameServer列表，与每个NameServer节点建立长连接，发起注册请求。在NameServer内部维护着⼀个Broker列表，用来动态存储Broker的信息。</p><blockquote><p>注意，这是与其它像<em>zk</em>、<em>Eureka</em>、<em>Nacos</em>等注册中心不同的地方。 </p><p>这种<em>NameServer</em>的无状态方式，有什么优缺点： </p><p>优点：<em>NameServer</em>集群搭建简单，扩容简单。 </p><p>缺点：对于<em>Broker</em>，必须明确指出所有<em>NameServer</em>地址。否则未指出的将不会去注册。也正因 为如此，<em>NameServer</em>并不能随便扩容。因为，若<em>Broker</em>不重新配置，新增的<em>NameServer</em>对于 <em>Broker</em>来说是不可见的，其不会向这个<em>NameServer</em>进行注册。</p></blockquote><p>Broker节点为了证明自己是活着的，为了维护与NameServer间的长连接，会将最新的信息以心跳包的方式上报给NameServer，每30秒发送一次心跳。心跳包中包含 BrokerId、Broker地址(IP+Port)、 Broker名称、Broker所属集群名称等等。NameServer在接收到心跳包后，会更新心跳时间戳，记录这个Broker的最新存活时间。</p>]]></content>
    
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux随笔</title>
    <link href="/2021/07/25/linux%E9%9A%8F%E7%AC%94/"/>
    <url>/2021/07/25/linux%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717090500369.png" alt="image-20210717090500369"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717090557301.png" alt="image-20210717090557301"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717092156240.png" alt="image-20210717092156240"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717092247954.png" alt="image-20210717092247954"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717092720926.png" alt="image-20210717092720926"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717095757720.png" alt="image-20210717095757720"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717100119467.png" alt="image-20210717100119467"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717100309244.png" alt="image-20210717100309244"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717100405216.png" alt="image-20210717100405216"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717113249234.png" alt="image-20210717113249234"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717150213076.png" alt="image-20210717150213076"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717150233956.png" alt="image-20210717150233956"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717152017549.png" alt="image-20210717152017549"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717152735900.png" alt="image-20210717152735900"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717153127445.png" alt="image-20210717153127445"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717155050422.png" alt="image-20210717155050422"></p><p><img src="https://gitee.com/wang-yang11/ingcache/raw/master/ingcache/image-20210717160904588.png" alt="image-20210717160904588"></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
